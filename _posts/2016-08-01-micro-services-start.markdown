---
layout:     post
title:      "服务化改造（一） - 前期准备"
date:       2016-08-01 13:20:00
author:     "Harry"
header-img: "img/post-bg-2015.jpg"
tags:
    - 微服务
---

## 服务化背景

我们公司主要的项目是一个微信电商平台，主要是帮助第三方商家在微信上快速开店。项目开发到现在大概有两年时间了，现在基本功能已经比较稳定，处于业务上高速发展，功能上快速迭代的阶段。但是由于项目现在还是一个单体应用，虽然各个模块划分相对清晰，但是由于代码都在一个代码库里，模块之间免不了有很多项目调用的地方，导致单个模块无法独立上线，模块间的开发周期互相牵制，极大的影响了项目的开发进度，在这个移动互联网高速发展的阶段，时间就是优势，开发速度慢就要挨打，甚至是死亡，所以为了解决模块间的互相牵制，降低模块间的耦合，以及提高系统的扩展性，公司决定对项目进行服务化改造

## 技术准备

在开始准备对这个项目进行服务化改造之前，我虽然对服务化有一些了解，但是要用在真正的项目还远远不够，所以我花了一个月的业余时间，对服务化的相关知识做了一个系统性的学习和了解，我的学习计划是看书为主，google为辅。通过看书建立系统的知识体系，再通过google相关信息了解各种不同的解决方案、思想以及经验，下面是我觉得写得比较好的两本书：《微服务设计》、《分布式服务框架原理与实践》

![微服务设计](http://oeii54s39.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1.jpg)

《微服务设计》是由Sam Newman编著的一本关于微服务的书，全面的介绍了微服务的相关知识点，对于建立系统的服务化知识体系及思想起到了非常好的作用，我建议每个架构师及参与服务化的人都应该通读此书，但是这本书对所有的知识点的介绍都是点到为止，没有具体到哪种语言以及用具体的工具如何实施，所以单靠这本书并不足以让技术落地。

![分布式服务框架原理与实践](http://oeii54s39.bkt.clouddn.com/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6.jpg)

《分布式服务框架原理与实践》是由李林峰编著的介绍基于Java的服务化实践，李林峰老师是华为的Paas平台架构师，拥有多年的架构经验，从书中就能够感受到李林峰老师丰富的实战经验，这本书与《微服务设计》很不同，讲得都是具体的实践，阅读此书有一种拳拳到肉的快感，虽然是基于Java，但对于使用其他语言的服务化框架，也很有借鉴意义。

这两本书相辅相成，理论与实践相结合。通过阅读这两本书，我对服务化相关思想和技术都有了系统的了解，也对当前项目的服务化有了初步的规划。

## 服务化规划

好的架构都是演变出来的，这句话相信没人有意见，也就说我们不可能一开始就搞出一个很完善的服务化架构，但我们也不能只考虑当前情况，需要有中长期目标，为后面的改进做准备，所以我的想法是先一窥服务化框架全貌，然后再结合当前项目总结出第一阶段必须实现的功能，然后再根据实际情况演变。
下面的图是我从《分布式服务框架原理与实践》里面总结出来的服务化框架全貌（不是最全的，但是也能涵盖大部分了）。

![微服务](http://oeii54s39.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84.png)

通过这张图我们可以看到服务化架构需要实现的功能以及需要满足的特性，根据这张图跟项目实际情况，我总结出了第一阶段需要实现的功能

![服务化第一阶段](http://oeii54s39.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%8C%96%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5.png)

### 代码解耦
服务化以后，需要将代码分解到不同的服务中，这时需要精通业务的人介入，理想情况下可以在这一步消除大部分分布式事务

### 注册中心
随着服务增大，手动维护每个服务的地址将非常困难，引入注册中心后可以方便的上下线服务以及实现健康检查，提高架构的高可用性

### 通讯框架
拆分服务后，各个服务之间通过通讯框架调用，所以通讯框架的实现是重中之重

### 分布式事务
分布式事务是服务化过程中不可避免的问题，而且没有银弹，需要根据实际情况考虑解决方案，所以在项目开始之初就需要正视这个问题

### 消息队列
作为解决分布式事务的手段之一，利用消息队列实现基于事件的事务系统，可以起到保证最终一致性和解耦的目的

### 日志
服务化以后，debug成了一个严重的问题，由于每个服务都会不同程度的调用其他服务，一旦出问题很难定位是哪个服务出的问题，所以这时日志就显得尤为重要，完善的日志可以很大程度上的提高定位问题的效率